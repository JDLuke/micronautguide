# This workflow will build a Java project with Maven, and cache/restore any dependencies to improve the workflow execution time
# For more information see: https://docs.github.com/en/actions/automating-builds-and-tests/building-and-testing-java-with-maven

# This workflow uses actions that are not certified by GitHub.
# They are provided by a third-party and are governed by
# separate terms of service, privacy policy, and support
# documentation.

name: Maven Build

on:
  push:
    branches: [ "main" ]

  pull_request:
    branches: [ "main" ]

permissions:
  contents: write
  issues: write
  deployments: write
  pages: write
  packages: write
  checks: write
  statuses: write

jobs:
  build:
    runs-on: ubuntu-latest
    outputs:
      build_version: ${{ steps.extract_version.outputs.build_version }}


    steps:
    - name: Check out from Version Control
      uses: actions/checkout@v4

    - name: Set up JDK 17
      uses: actions/setup-java@v4
      with:
        java-version: '17'
        distribution: 'temurin'
        cache: maven

    - name: Cache local Maven repository
      uses: actions/cache@v4
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-

    - name: Build and run tests
      run: mvn test --batch-mode --fail-at-end

    - name: Publish Surefire Report
      uses: scacap/action-surefire-report@v1
      with:
        report_paths: '**/target/surefire-reports/TEST-*.xml'

    - name: Bump version
      id: bump
      uses: mickem/gh-action-bump-maven-version@v1
      with:
        pom-file: 'pom.xml'
        bump-command: 'mvn versions:set -DnewVersion=@NEW_VERSION@'


    - name: Build
      run: mvn clean package


    - name: Extract version number
      id: extract_version
      run: |
        VERSION=$(mvn help:evaluate -Dexpression=project.version -q -DforceStdout)
        echo "VERSION=$VERSION" >> $GITHUB_ENV
        echo "build_version=$VERSION" >> $GITHUB_OUTPUT
        echo "Version set to: $VERSION"
        # This is how the output is set correctly for the job
        echo "build_version=${{ steps.extract_version.outputs.build_version }}"

    - name: Upload jar
      uses: actions/upload-artifact@v4
      with:
        name: micronautguide-${{ env.VERSION }}
        path: target/micronautguide-${{ env.VERSION }}.jar

  release:
    needs: build
    runs-on: ubuntu-latest

    steps:

      - uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'
          cache: maven

      - name: Download build
        uses: actions/download-artifact@v4
        with:
          github-token: ${{ secrets.GITHUB_TOKEN }}

      - name: Use version from build
        run: echo "The build version is ${{ needs.build.outputs.build_version }}"

      - name: Create GitHub Release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ needs.build.outputs.build_version }}
          release_name: Release ${{ needs.build.outputs.build_version }}
          body: |
            Release notes for ${{ needs.build.outputs.build_version }}

      - name: Upload Release Asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: micronautguide-${{ needs.build.outputs.build_version }}.jar
          asset_name: micronautguide-${{ needs.build.outputs.build_version }}.jar
          asset_content_type: application/java-archive